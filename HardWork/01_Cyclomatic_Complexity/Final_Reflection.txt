Выводы.
Избавление от if не только помогает повысить читаемость логики,
но и предоставляет простой и надежный способ для расширяемости кода.
Когда в реальных проектах используются длинные цепочки операторов,
даже рефакторинг нужно производить весьма осторожно, поскольку
данный код уже в production и менять его по хорошему нельзя.
Однако if не предлагает альтернативы.
С использованием же приемов (стратегия, состояние, полиморфизм)
мы легко можем добавить новый тип, не трогая старый код.
Также очень удобным оказался паттерн null-object. Если
стратегии я активно применял ранее, то данный паттерн попробоваль 
впервые и приму его на вооружение.

Ссылки на решения:
Пример 1.
https://github.com/kvarlamov/lessons/blob/main/HardWork/01_Cyclomatic_Complexity/Example1_WithoutFix.cs
https://github.com/kvarlamov/lessons/blob/main/HardWork/01_Cyclomatic_Complexity/Example1_Fixed.cs
https://github.com/kvarlamov/lessons/blob/main/HardWork/01_Cyclomatic_Complexity/Example1_reflection.txt

Пример 2.
https://github.com/kvarlamov/lessons/blob/main/HardWork/01_Cyclomatic_Complexity/Example2_withoutFix.cs
https://github.com/kvarlamov/lessons/blob/main/HardWork/01_Cyclomatic_Complexity/Example2_Fixed.cs
https://github.com/kvarlamov/lessons/blob/main/HardWork/01_Cyclomatic_Complexity/Example2_Reflection.txt

Пример 3.
https://github.com/kvarlamov/lessons/blob/main/HardWork/01_Cyclomatic_Complexity/Example3_WithoutFix.cs
https://github.com/kvarlamov/lessons/blob/main/HardWork/01_Cyclomatic_Complexity/Example3_Fixed.cs
https://github.com/kvarlamov/lessons/blob/main/HardWork/01_Cyclomatic_Complexity/Example3_Reflection.txt
