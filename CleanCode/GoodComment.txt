I. Информативные комментарии 
    1.
    // Название этого таба заполняется на фронте
    Title = string.Empty,
    -
    Данный комментарий снимает вопрос о заполнении значением Empty
    2.
    // Ограничение Microsoft Excel по максимальной длине имени листа
    private const byte MaxAllowedSheetTitleLength = 31;
    -
    Данный комментарий показывает ограничения системы и снимает с других разработчиков необходимость ее поиска

II. Представление намерений
    3.
    //Добавляем описание полей, которые не используются в фильтре, так как далее может понадобится их описание
    formHeader.FieldDescriptions.AddRange(fieldsNotForSearch);
    -
    Описываем, для чего нам в будущем может понадобиться указанная операция
    
    4.
    // Skip(1), чтобы пропустить заголовки.
    IEnumerable<IXLRow> rowsWithoutHeaders = worksheet.Rows().Skip(1);
    -
    Описываем необходимость делать skip

III. Прояснение
    5.
    // пока для остальных типов полей нет специальных валидационных правил,
    // поэтому этот метод в этой стратегии всегда возвращает true
    return await Task.FromResult(true);
    - 
    Поясняем почему возвращаемое значение true
    
    6.
    // Если у пользователя необходимый атрибут в принципе отсутствовал, то можно сразу считать, что проверка провалена
    if (factoryRequest.UserAttribute is null)
    -
    Поясняем проверку на null

IV. Предупреждения о последствиях
    7.
    // Skip, Take могут медленно работать при наличии 10к записей, если нужна оптимизация - можно заменить на ROW_NUMBER
    -
    Описываем, почему не стоит применять определенные операторы в данном случае
    
    8.
    // Здесь Where().FirstOrDefaultAsync() используется специально.
    // Причина: Where(%condition%).FirstOrDefaultAsync() работает быстрее, чем FirstOrDefaultAsync(%condition%).
    -
    Предупреждаем, почему в будущем нужно использовать указанную конструкцию

V. Усиление
    9.
    // Открытую скобку тоже без проверок всегда кладем в стек операторов.
    if (token.Descriptor.SyntaxKind == RestrictionRuleSyntaxKind.OpenParenthesisToken)
    -
    подчеркиваем, что всегда нужно класть символ в стек операторов
    
    10.
    // Закрытая скобка тоже особый кейс. Надо доставать из стека все операторы, пока не дойдем до открытой скобки.
    if (token.Descriptor.SyntaxKind == RestrictionRuleSyntaxKind.CloseParenthesisToken)
    -
    подчеркиваем, что этот вид скобки также требует особого внимания

VI. Комментарии TODO
    11.
    // TODO: раскомментировать когда будет решена проблема некорректного фильтра по умолчанию при открытии реестра. (задача 7845). 
    -
    Поскольку проблема еще только ожидает решения в работе, оставляем подсказку на будущее
    
    12.
    // TODO: удалить когда все сервисы удалят эластик (релиз Х)
    -
    Напоминание о необходимости удаления функционала после выпиливания из системы эластика
