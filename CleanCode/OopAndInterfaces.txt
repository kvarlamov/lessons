1. In most cases it's better to use static factory methods instead of constructor
1.1
*before*

DbTableMetadata tableMetadata = new DbTableMetadata(tableName)

public class DbTableMetadata
{
    private string _tableName;

    public DbTableMetadata(string tableName){
        _tableName = tableName;
    }
    
    ...
}
*after*

DbTableMetadata tableMetadata = DbTableMetadata.CreateMetadadaForTable(tableName)

public class DbTableMetadata
{
    private readonly string _tableName;

    public static DbTableMetadata CreateMetadadaForTable(string tableName)
    {
        return new DbTableMetadata(tableName);
    }
    private DbTableMetadata(string tableName)
    {
        _tableName = tableName;
    }
    
    ...
}

1.2
*before*

QueryDto queryDto = new QueryDto(serviceName, restrictionRule, pageSize, isNeedToIncludeSource);

public class QueryDto
{
    private readonly string _serviceName;
    private readonly string _restrictionRule;
    private readonly int _pageSize;
    private readonly bool _isNeedToIncludeSource;

    public QueryDto(string serviceName, string restrictionRule, int pageSize, bool isNeedToIncludeSource)
    {
        _serviceName = serviceName;
        _restrictionRule = restrictionRule;
        _pageSize = pageSize;
        _isNeedToIncludeSource = isNeedToIncludeSource;
    }
}

*after*

QueryDto queryDto = QueryDto.CreateWithParams(serviceName, restrictionRule, pageSize, isNeedToIncludeSource);

public class QueryDto
{
    private readonly string _serviceName;
    private readonly string _restrictionRule;
    private readonly int _pageSize;
    private readonly bool _isNeedToIncludeSource;

    public static QueryDto CreateWithParams(string serviceName, string restrictionRule, int pageSize, bool isNeedToIncludeSource) =>
        new QueryDto(serviceName, restrictionRule, pageSize, isNeedToIncludeSource);

    private QueryDto(string serviceName, string restrictionRule, int pageSize, bool isNeedToIncludeSource)
    {
        _serviceName = serviceName;
        _restrictionRule = restrictionRule;
        _pageSize = pageSize;
        _isNeedToIncludeSource = isNeedToIncludeSource;
    }
}

1.3
*before*

var hierarhyLevelDto = new HierarchyLevelDto(id);
или
var hierarhyLevelDto = new HierarchyLevelDto(id, nodeId, parentNodeId);

public class HierarchyLevelDto
{
    private readonly string _id;
    private readonly string _nodeId;
    private readonly string _parentNodeId;

    public HierarchyLevelDto(string id)
    {
        ...
    }
    
    public HierarchyLevelDto(string id, string nodeId, string parentNodeId)
    {
        ...        
    }
}

*after*

var hierarhyLevelDto = HierarchyLevelDto.CreateBasedOn(id);
or
var hierarhyLevelDto = HierarchyLevelDto.CreateBasedOn(id, nodeId, parentNodeId);

public class HierarchyLevelDto
{
    private readonly string _id;
    private readonly string _nodeId;
    private readonly string _parentNodeId;

    public static HierarchyLevelDto CreateBasedOn(string id) =>
        new HierarchyLevelDto(id);
        
    public static HierarchyLevelDto CreateBasedOn(string id, string nodeId, string parentNodeId) =>
        new HierarchyLevelDto(id, nodeId, parentNodeId);

    private HierarchyLevelDto(string id)
    {
        ...
    }
    
    private HierarchyLevelDto(string id, string nodeId, string parentNodeId)
    {
        ...        
    }
}

2. Interfaces should be without I*. (but how to be with dotnet where it's best practice and used by default Microsoft guys?)

2.1.
IBackgroundWorkerService -> BackgroundWorkerService
-
BackgroundWorkerService -> BackgroundWorkerServiceImp (CBackgroundWorkerService)

2.2.
IAllowedKindMapper -> AllowedKindMapper
-
AllowedKindMapper -> AllowedKindMapperImp (CAllowedKindMapper)

2.3
ITemplateFacadeService -> TemplateFacadeService
-
TemplateFacadeService -> TemplateFacadeServiceImp (CTemplateFacadeService)

2.4
IFieldKindStrategy -> FieldKindStrategy
-
FieldKindStrategy -> FieldKindStrategyImp (CFieldKindStrategy)

2.5
IQueryBuilderFactory -> QueryBuilderFactory
-
QueryBuilderFactory -> QueryBuilderFactoryImp (CQueryBuilderFactory) 