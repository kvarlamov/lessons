Схемы создания объектов:
-- Объекты, управляющие состоянием игры будем создавать через паттерн Singleton,
например для GameManager:

public static GameManager Instance
{
    get
    {
        if (_instance == null)
        {
            _instance = new GameManager();
        }

        return _instance;
    }
}

-- Объекты - элементы создаем c использованием паттерна Flyweight, далее просто их получаем:
internal sealed class ElementFactory
{
    List<string> _elements = new();

    public ElementFactory()
    {
        _elements.Add(Element.Create("A"));
        _elements.Add(Element.Create("B"));
        _elements.Add(Element.Create("C"));
        _elements.Add(Element.Create("D"));
        _elements.Add(Element.Create("E"));
    }

    public Element GetNext()
    {
        Random rnd = new Random();
        var index = rnd.GetNext(0, _elements.Count);
        return _elements[index];
    }
}

-- Обработка входных данных:
Вводим класс GameController (Input + Output manager) - фасад взаимодействия с пользователем

-- Обработка событий
Класс GameManager будет иметь несколько событий, например завершение хода, завершение игры и т.д.
На эти события подпишется класс статистики для обновления статистики после хода - запись очков и непосредственно хода игрока
Также BonusManager

Подписка на события, создание главных объектов игры будет происходить при запуске приложения в одном месте (program)

Тестирование
Инициализация игрового поля:
-- Проверить, что поле инициализируется правильно.
-- Убедиться, что элементы расставлены корректно - нет пропусков.

Обработка хода:
-- Проверить, что элементы правильно меняются местами.
-- Проверить, что поле обновляется корректно после хода.
-- Проверить, что все необходимые комбинации удалены
    
Завершение игры:
-- Проверить, что все необходимые компоненты уведомлены о завершении игры.
